---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides nesting for required stacks to deploy a full sample web application
  with reverse proxy, ELBs, IAM, and other resources (for demonstration/POC/testing)
  QS(0018)
Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20190715
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB
      name and password
  Output:
    Description: Outputs ID of all deployed resources
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Availability Zone selection
      Parameters:
      - AvailabilityZoneA
      - AvailabilityZoneB
    - Label:
        default: Network configuration
      Parameters:
      - ManagementCIDR
      - ProductionCIDR
      - ProductionVPC
      - DMZSubnetA
      - DMZSubnetB
      - AppPrivateSubnetA
      - AppPrivateSubnetB
#    - Label:
#        default: Logging configuration
#      Parameters:
#        - CentralLogBucket
#        - WAFLogging
#    - Label:
#        default: Amazon Elasticsearch configuration
#      Parameters:
#        - ESClusterARN
    - Label:
        default: Amazon EC2 configuration
      Parameters:
        - EC2KeyPair
    - Label:
        default: Database configuration
      Parameters:
        - DBName
        - DBUser
#        - DBPassword
#    - Label:
#        default: AWS Quick Start configuration
#      Parameters:
#      - QSS3BucketName
#      - QSS3KeyPrefix
    ParameterLabels:
      ProductionCIDR:
        default: Production VPC CIDR
      ProductionVPC:
        default: Production VPC ID
      DMZSubnetA:
        default: First public subnet ID
      DMZSubnetB:
        default: Second public subnet ID
      AppPrivateSubnetA:
        default: First private subnet ID
      AppPrivateSubnetB:
        default: Second private subnet ID
      AvailabilityZoneA:
        default: First Availability Zone for deployment
      AvailabilityZoneB:
        default: Second Availability Zone for deployment
#      ESClusterARN:
#        default: Amazon ES cluster
      EC2KeyPair:
        default: Existing SSH key
      ManagementCIDR:
        default: Management VPC CIDR
#      CentralLogBucket:
#        default: Centralized logging bucket for AWS WAF logs
#      WAFlogging:
#        default: Log storage location
#      QSS3BucketName:
#        default: Quick Start S3 bucket name
#      QSS3KeyPrefix:
#        default: Quick Start S3 key prefix
      DBHost:
        default: Aurora database host
      DBName:
        default: Aurora database name
      DBUser:
        default: Aurora database user
#      DBPassword:
#        default: Aurora database password
Parameters:
#  WAFlogging:
#    Type: String
#    Description: The storage location for AWS WAF logs. Choose Amazon Elasticsearch_S3 to have AWS WAF logs streamed to Amazon ES (current Region) and your central logging bucket.
#    AllowedValues:
#      - Amazon Elasticsearch_S3
#      - Amazon S3 Only
#    Default: Amazon S3 Only
#  ESClusterARN:
#    Type: String
#    Description: (If Amazon Elasticsearch_S3 is chosen for the WAFlogging parameter) The Amazon Resource Name (ARN) of the Amazon ES domain that Kinesis Data Firehose delivers data to. Cluster must be in same account and Region.
#    Default: ''
#  CentralLogBucket:
#    Type: String
#    Description: The S3 bucket to send AWS WAF logs to. This bucket should already exist and can be same bucket from the centralized logging template.
#    Default: ''
  EC2KeyPair:
    Description: The SSH key pair in your account to use for all other EC2 instance
      logins.
    Type: AWS::EC2::KeyPair::KeyName
    Default: dev2_seoul
  ProductionCIDR:
    Description: VPC CIDR for web application deployment. Can be production VPC CIDR from the main template.
    Type: String
    Default: 10.100.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  ManagementCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR range or IP address  to allow access to the web application servers.
    Type: String
    Default: 10.10.0.0/16
  ProductionVPC:
    Description: ID of the Production VPC, where the web application architecture will be deployed.
    Type: AWS::EC2::VPC::Id
    Default: vpc-0e5f7e30af7784aea
  AvailabilityZoneA:
    Description: The name of the first Availability Zone where you will deploy the the web application architecture.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-2a
  AvailabilityZoneB:
    Description: The name of the second Availability Zone where you will deploy the web application architecture.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-2b
  DMZSubnetA:
    Description: The ID of the first public subnet where the proxy servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-063fa0acaff42dc1c
  DMZSubnetB:
    Description: The ID of the second public subnet where the proxy servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0e2eee2ef3ebd7df5
  AppPrivateSubnetA:
    Description: The ID of the first private subnet where the application servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0d8f469d2500afca1
  AppPrivateSubnetB:
    Description: The ID of the second private subnet where the application servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-04a8a3dede7bfd342
#  QSS3BucketName:
#    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
#    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
#      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or
#      end with a hyphen (-). If you are unsure, do not change this value.
#    Default: isms-configuration-243231781563
#    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
#      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
#      It cannot start or end with a hyphen (-). If you are unsure, do not change this value.
#    Type: String
#  QSS3KeyPrefix:
#    AllowedPattern: ^[0-9a-zA-Z-/]*$
#    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
#      uppercase letters, hyphens (-), and forward slash (/).
#    Default: quickstart-korea-isms-p/
#    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
#      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
#      forward slash (/).
#    Type: String
  DBHost:
    Description: Amazon RDS MySQL endpoint
    Type: String
  DBName:
    Description: Name of RDS Database
    Type: String
    Default: examplewordpress
  DBUser:
    Description: Username of DB Instance
    Type: String
    Default: admin
#  DBPassword:
#    Description: Password of DB Instance
#    Type: String
#    NoEcho: True
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SecretKeyName:
    Description: DB Secret Key Name
    Type: String
Mappings:
  Instances:
    ap-northeast-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    ap-northeast-2:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    ap-south-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    ap-southeast-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    ap-southeast-2:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    ca-central-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    eu-central-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    eu-west-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    eu-west-2:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    sa-east-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.m3.large
    us-east-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    us-east-2:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    us-gov-west-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.m3.large
    us-west-1:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
    us-west-2:
      InstanceType: t3.small
      InstanceTypeDatabase: db.t3.small
#  AWSAMIRegionMap:
#    ap-northeast-1:
#      AMZNLINUXHVM: ami-079e6fb1e856e80c1
#    ap-northeast-2:
#      AMZNLINUXHVM: ami-0e4a253fb5f082688
#    ap-south-1:
#      AMZNLINUXHVM: ami-01e074f40dfb9999d
#    ap-southeast-1:
#      AMZNLINUXHVM: ami-0d9233e8ce73df7b2
#    ap-southeast-2:
#      AMZNLINUXHVM: ami-0c91f97cadcc8499e
#    ca-central-1:
#      AMZNLINUXHVM: ami-003a0ba7ea76b2785
#    eu-central-1:
#      AMZNLINUXHVM: ami-0ab838eeee7f316eb
#    eu-west-1:
#      AMZNLINUXHVM: ami-071f4ce599deff521
#    eu-west-2:
#      AMZNLINUXHVM: ami-0e49551fc78560451
#    sa-east-1:
#      AMZNLINUXHVM: ami-04b202bf877b5027b
#    us-east-1:
#      AMZNLINUXHVM: ami-09d069a04349dc3cb
#    us-east-2:
#      AMZNLINUXHVM: ami-0d542ef84ec55d71c
#    us-gov-west-1:
#      AMZNLINUXHVM: ami-e9a9d388
#    us-gov-east-1:
#      AMZNLINUXHVM: ami-2093423904
#    us-west-1:
#      AMZNLINUXHVM: ami-04bc3da8f14823e88
#    us-west-2:
#      AMZNLINUXHVM: ami-01460aa81365561fe
Conditions:
  GovCloudCondition: !Or [!Equals [!Ref "AWS::Region", us-gov-west-1], !Equals [!Ref "AWS::Region", us-gov-east-1]]
Resources:
  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy in DMZ
      VpcId: !Ref ProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz
  SecurityGroupWebInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy Instances in DMZ
      VpcId: !Ref ProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ProductionCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ProductionCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ManagementCIDR
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz-instances
  SecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appservers ELB
      VpcId: !Ref ProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ProductionCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ProductionCIDR
      Tags:
        - Key: Name
          Value: sg-app-server-elb
  SecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref ProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ProductionCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ProductionCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ManagementCIDR
      Tags:
        - Key: Name
          Value: sg-app-server-elb-instances
  WebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: Transition90daysRetain7yrs
            Status: Enabled
            ExpirationInDays: 2555
            Transition:
              TransitionInDays: 90
              StorageClass: STANDARD_IA
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
  WebContentS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebContentBucket
      PolicyDocument:
        Statement:
          - Sid: EnforceSecureTransport
            Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource:
              !Sub
              - arn:${Partition}:s3:::${WebContentBucket}
              - Partition:
                  !If
                  - GovCloudCondition
                  - aws-us-gov
                  - aws
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: EnforceEncryptionOnPut
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource:
              !Sub
              - arn:${Partition}:s3:::${WebContentBucket}/*
              - Partition:
                  !If
                  - GovCloudCondition
                  - aws-us-gov
                  - aws
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256
  ELBApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref AppPrivateSubnetA
        - !Ref AppPrivateSubnetB
      SecurityGroups:
        - !Ref SecurityGroupApp
      Scheme: internal
      Type: application
      Tags:
        - Key: Name
          Value: ProxyELB
  ELBappHTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Port: 80
      Protocol: "HTTP"
      LoadBalancerArn: !Ref ELBApp
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
  ELBWeb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref DMZSubnetA
        - !Ref DMZSubnetB
      SecurityGroups:
        - !Ref SecurityGroupWeb
      Type: application
      Tags:
        - Key: Name
          Value: Proxy ELB
  ELBwebHTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Port: 80
      Protocol: "HTTP"
      LoadBalancerArn: !Ref ELBWeb
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Assets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DescribeVolumes
                Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                Resource: "*"
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebInstanceRole
  AutoScalingConfigWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ELBApp
      - AutoScalingGroupApp
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                  listen 80;
                  charset utf-8;
                  location / {
                    resolver xxxxx;
                    set $elb 'https://${ELBApp.DNSName}';
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_redirect off;
                    proxy_pass $elb;
                  }
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            01-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                sudo amazon-linux-extras install nginx1.12
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sudo sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                sudo cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                sudo systemctl stop nginx
                sudo sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                sudo systemctl restart nginx
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/conf.d/default.conf

    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref WebInstanceProfile
      InstanceType:
        !FindInMap
        - Instances
        - !Ref AWS::Region
        - InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sdh
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            Encrypted: true
      KeyName: !Ref EC2KeyPair
      SecurityGroups:
        - !Ref SecurityGroupWebInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AutoScalingConfigWeb --region ${AWS::Region}

          ## Nginx setup
          sleep 5
          cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
          service nginx stop
          sed -i '/default_server;/d' /etc/nginx/nginx.conf
          sleep 10
          service nginx restart
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ProductionVPC
      TargetType: instance
      Name: WebTGroup
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200,302,403
      HealthCheckPath: /wordpress/wp-admin/install.php
  AutoScalingGroupWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZoneA
        - !Ref AvailabilityZoneB
      VPCZoneIdentifier:
        - !Ref DMZSubnetA
        - !Ref DMZSubnetB
      LaunchConfigurationName: !Ref AutoScalingConfigWeb
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
        - !Ref WebTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: Proxy Server
          PropagateAtLaunch: true
  AutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: 1
  AutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: -1
  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Assets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DescribeVolumes
                Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                Resource: "*"
        - PolicyName: SecretAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: getSecret
                Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: '*'
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref AppInstanceRole
  AutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.AutoScalingConfigApp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AutoScalingGroupApp --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                /**
                 * The base configuration for WordPress
                 *
                 * The wp-config.php creation script uses this file during the
                 * installation. You don't have to use the web site, you can
                 * copy this file to "wp-config.php" and fill in the values.
                 *
                 * This file contains the following configurations:
                 *
                 * * MySQL settings
                 * * Secret keys
                 * * Database table prefix
                 * * ABSPATH
                 *
                 * @link https://codex.wordpress.org/Editing_wp-config.php
                 *
                 * @package WordPress
                 */

                // ** MySQL settings - You can get this info from your web host ** //
                /** The name of the database for WordPress */
                define( 'DB_NAME', '${DBName}' );

                /** MySQL database username */
                define( 'DB_USER', '${DBUser}' );

                /** MySQL database password */
                define( 'DB_PASSWORD', 'password_here' );

                /** MySQL hostname */
                define( 'DB_HOST', '${DBHost}' );

                /** Database Charset to use in creating database tables. */
                define( 'DB_CHARSET', 'utf8' );

                /** The Database Collate type. Don't change this if in doubt. */
                define( 'DB_COLLATE', '' );

                /**
                 * WordPress Database Table prefix.
                 *
                 * You can have multiple installations in one database if you give each
                 * a unique prefix. Only numbers, letters, and underscores please!
                 */
                $table_prefix = 'wp_';

                /**
                 * For developers: WordPress debugging mode.
                 *
                 * Change this to true to enable the display of notices during development.
                 * It is strongly recommended that plugin and theme developers use WP_DEBUG
                 * in their development environments.
                 *
                 * For information on other constants that can be used for debugging,
                 * visit the Codex.
                 *
                 * @link https://codex.wordpress.org/Debugging_in_WordPress
                 */
                define('WP_DEBUG', false );
                define('WP_ALLOW_REPAIR', true);

                /* That's all, stop editing! Happy publishing. */

                /** Absolute path to the WordPress directory. */
                if ( ! defined( 'ABSPATH' ) ) {
                	define( 'ABSPATH', dirname( __FILE__ ) . '/' );
                }

                /** Sets up WordPress vars and included files. */
                require_once( ABSPATH . 'wp-settings.php' );

              mode: '000644'
              owner: root
              group: root
            /tmp/update-wp-config:
              content: !Sub |
                #!/bin/bash -xe
                secret="$(aws secretsmanager get-secret-value --secret-id ${SecretKeyName} --region ${AWS::Region} --query SecretString --output text |jq '.password' |sed -e 's/^\"//g' |sed -e 's/\"$//g')"
                sed -i "s/password_here/$secret/g" /var/www/html/wordpress/wp-config.php
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref AppInstanceProfile
      InstanceType:
        !FindInMap
        - Instances
        - !Ref AWS::Region
        - InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sdh
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            Encrypted: true
      KeyName: !Ref EC2KeyPair
      SecurityGroups:
        - !Ref SecurityGroupAppInstance
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x

            yum update -y

            sudo amazon-linux-extras install php7.2
            sudo amazon-linux-extras install httpd_modules
            sudo yum install -y jq
            sudo yum install -y httpd mariadb-server
            sudo amazon-linux-extras install lamp-mariadb10.2-php7.2
            sleep 5
            
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AutoScalingConfigApp --configsets wordpress_install --region ${AWS::Region}

            ######################################################################
            #     NOTE: UPDATE THESE VALUES ACCORDING TO THE COMPLIANCE BODY     #
            ######################################################################
            LANDING_PAGE="/var/www/html/landing.html"
            COMPLIANCE_BODY_LABEL="PCI DSS"
            COMPLIANCE_SURVEY_LINK="pci"
            COMPLIANCE_MATRIX_FILENAME="PCI-DSS3.2.1-Security-Controls-Mapping.xlsx"
            ######################################################################

            # Download the landing page.
            sudo wget https://cloudformationlctemplates.s3.amazonaws.com/landing.html -O $LANDING_PAGE

            # Replace relative image links with links to the production S3 source.
            sudo sed -i 's|images|https://cloudformationlctemplates.s3.amazonaws.com/images|g' $LANDING_PAGE

            # Inject the landing page branding label.
            sudo sed -i "s|{compliance-body}|$COMPLIANCE_BODY_LABEL|g" $LANDING_PAGE

            # Inject the survey link parameter.
            sudo sed -i "s|{compliance-body-survey-link}|$COMPLIANCE_SURVEY_LINK|g" $LANDING_PAGE

            # Inject the security control matrix file location.
            sudo sed -i "s|{compliance-body-matrix}|https://cloudformationlctemplates.s3.amazonaws.com/$COMPLIANCE_MATRIX_FILENAME|g" $LANDING_PAGE

            # Update db password.
            secret="$(aws secretsmanager get-secret-value --secret-id ${SecretKeyName} --region ${AWS::Region} --query SecretString --output text |jq '.password' |sed -e 's/^\"//g' |sed -e 's/\"$//g')"
            #cat $secret > /tmp/test
            sed -i "s/password_here/$secret/g" /var/www/html/wordpress/wp-config.php


  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ProductionVPC
      TargetType: instance
      Name: AppTGroup
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200,302,403
      HealthCheckPath: /wordpress/wp-admin/install.php
  AutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZoneA
        - !Ref AvailabilityZoneB
      VPCZoneIdentifier:
        - !Ref AppPrivateSubnetA
        - !Ref AppPrivateSubnetB
      LaunchConfigurationName: !Ref AutoScalingConfigApp
      MinSize: "1"
      MaxSize: "1"
      TargetGroupARNs:
        - !Ref AppTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 3000
      Tags:
        - Key: Name
          Value: AppServer
          PropagateAtLaunch: true
  AutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: 1
  AutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: -1
  

  PostProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - waf-regional.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PostProcPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: UploadServerCertificate
                Effect: Allow
                Action:
                  - iam:ListServerCertificates
                  - iam:UploadServerCertificate
                  - iam:CreateServiceLinkedRole
                Resource: "*"
              - Sid: CreateLoadBalancerListener
                Effect: Allow
                Action:
                  - elasticloadbalancing:*
                Resource: "*"
              - Sid: SelfDestruct
                Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource: "*"
              - Sid: WAFListACL
                Effect: Allow
                Action:
                  - waf-regional:ListWebACLs
                  - waf-regional:ListLoggingConfigurations
                  - waf-regional:PutLoggingConfiguration
                Resource: "*"
  PostProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref PostProcInstanceRole
  PostProcInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - AutoScalingGroupApp
      - AutoScalingGroupWeb
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType:
        !FindInMap
        - Instances
        - !Ref AWS::Region
        - InstanceType
      IamInstanceProfile: !Ref PostProcInstanceProfile
      SubnetId: !Ref AppPrivateSubnetA
      KeyName: !Ref EC2KeyPair
      SecurityGroupIds:
        - !Ref SecurityGroupAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          set -x
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          echo Configure the region, necessary especially for GovCloud
          aws configure set region ${AWS::Region}

          echo Determine whether a certificate needs to be generated
          cert_arn=$(aws iam list-server-certificates --query 'ServerCertificateMetadataList[?ServerCertificateName==`non-production-testing-server-cert`].Arn' --output text)
          if [[ $(echo "$cert_arn" | grep "non-production-testing-server-cert") != *"non-production-testing-server-cert"* ]]; then
            echo *** Beginnning ELB HTTPS configuration ***
            echo Generating private key...
            openssl genrsa -out /tmp/my-private-key.pem 2048
            echo Creating CSR
            openssl req -sha256 -new -key /tmp/my-private-key.pem -out /tmp/csr.pem -subj "/C=US/ST=Washington/L=Seattle/O=NonProductionTestCert/CN=NonProductionTestCert"
            echo Self-signing certificate...
            openssl x509 -req -days 365 -in /tmp/csr.pem -signkey /tmp/my-private-key.pem -out /tmp/my-certificate.pem
            openssl rsa -in /tmp/my-private-key.pem -outform PEM
            echo Converting private key...
            openssl x509 -inform PEM -in /tmp/my-certificate.pem
            echo Uploading key to AWS IAM and saving ARN to environment variable...
            cert_arn=$(aws iam upload-server-certificate --server-certificate-name non-production-testing-server-cert --query 'ServerCertificateMetadata.Arn' --output text --certificate-body file:///tmp/my-certificate.pem --private-key file:///tmp/my-private-key.pem)
            webTG_arn=$(aws elbv2 describe-target-groups --name WebTGroup --query 'TargetGroups[].TargetGroupArn' --region ${AWS::Region} --output text)
            appTG_arn=$(aws elbv2 describe-target-groups --name AppTGroup --query 'TargetGroups[].TargetGroupArn' --region ${AWS::Region} --output text)
            echo Sleeping so IAM can propogate the certificate...
            sleep 10
            echo Removing key files...
            rm /tmp/*.pem
          fi
          webTG_arn=$(aws elbv2 describe-target-groups --name WebTGroup --query 'TargetGroups[].TargetGroupArn' --output text)
          appTG_arn=$(aws elbv2 describe-target-groups --name AppTGroup --query 'TargetGroups[].TargetGroupArn' --output text)
          echo Creating ELB HTTPS listener using the cert stored in the environment variable...
          aws elbv2 create-listener --load-balancer-arn ${ELBWeb} --protocol HTTPS --port 443 --certificates CertificateArn=$cert_arn --default-actions Type=forward,TargetGroupArn=$webTG_arn --region ${AWS::Region}
          aws elbv2 create-listener --load-balancer-arn ${ELBApp} --protocol HTTPS --port 443 --certificates CertificateArn=$cert_arn --default-actions Type=forward,TargetGroupArn=$appTG_arn --region ${AWS::Region}

          echo Sleeping for 1.5 minutes to allow CloudFormation to catch up
          sleep 90
          #webACL_id=$(aws waf-regional list-web-acls --query 'WebACLs[].WebACLId' --output text)
          #aws waf-regional put-logging-configuration --logging-configuration ResourceArn=arn:aws:waf-regional:${AWS::Region}:${AWS::AccountId}:webacl/$webACL_id,LogDestinationConfigs=arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-waf-logs-analytics,RedactedFields=[] --region ${AWS::Region}
          sleep 10
          echo Self-destruct!
          aws ec2 terminate-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
          echo *** ELB HTTPS configuration complete ***

      Tags:
        - Key: Name
          Value: PostProcessor
Outputs:
  LandingPageURL:
    Value: !Sub https://${ELBWeb.DNSName}/landing.html
    Description: Landing Page
  WebsiteURL:
    Value: !Sub https://${ELBWeb.DNSName}/wordpress/wp-admin/install.php
    Description: WordPress Website (demonstration purposes only)
  SecurityGroupWeb:
    Value: !Ref SecurityGroupWeb
  SecurityGroupApp:
    Value: !Ref SecurityGroupApp
  WebLoadBalancer:
    Value: !Ref ELBWeb
  SurveyLink:
    Description: Please take a moment to complete the survey by clicking this link
    Value: https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=pci
  Help:
    Description: For assistance or questions regarding this quickstart please email
      compliance-accelerator@amazon.com
    Value: ''
...
